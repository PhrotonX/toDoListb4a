Build1=Default,com.cm.todolist
File1=3528206.png
File10=Layout.bal
File11=settingsabout.bal
File12=settingshelp.bal
File13=settingslayout.bal
File14=sviewlayout.bal
File15=TaskItemLayout.bal
File16=taskviewlayout.bal
File17=taskviewscrolllayout.bal
File2=aboutitems.bal
File3=AttachmentItemLayout.bal
File4=EditorLayout.bal
File5=EditorScrollLayout.bal
File6=folder.png
File7=helpitems.bal
File8=ic_launcher.png
File9=ic_launcher_xl.png
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=animation
Library10=xcustomlistview
Library11=xui
Library12=b4xdrawer
Library2=contentresolver
Library3=core
Library4=externalstorage
Library5=javaobject
Library6=nb6
Library7=phone
Library8=reflection
Library9=sql
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="24"~\n~android:targetSdkVersion="34" />~\n~<supports-screens android:largeScreens="true" ~\n~	android:debuggable="true"~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.WRITE_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="34" />~\n~)~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.READ_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="34" />~\n~)~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.MANAGE_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="34" />~\n~)~\n~#AdditionalJar: com.android.support:support-core-utils~\n~'End of default text.~\n~
Module1=Attachment
Module10=DaysOfTheWeek
Module11=Dimen
Module12=EditorActivity
Module13=FileUtils
Module14=Group
Module15=GroupDao
Module16=SettingsAbout
Module17=SettingsActivity
Module18=SettingsHelp
Module19=Starter
Module2=AttachmentDao
Module20=TaskDao
Module21=TaskRepository
Module22=TaskViewerActivity
Module23=TaskViewHolder
Module24=TaskViewModel
Module25=Theme
Module26=Time
Module27=ToDo
Module28=ToDoDatabase
Module29=ToDoFileSystem
Module3=AttachmentFileRepository
Module4=AttachmentRepository
Module5=AttachmentViewHolder
Module6=AttachmentViewModel
Module7=DatabaseUtils
Module8=Date
Module9=DateAndTime
NumberOfFiles=17
NumberOfLibraries=12
NumberOfModules=29
Version=13.1
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: To Do List
	#VersionCode: 8
	#VersionName: v2.0.0.1 alpha
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	Private ToDoList As CustomListView
	Private chkToDoItem As CheckBox
	Private toDoItemInfo As Label
	Private menuBtn As Button
	Private btnAdd As Button
	Private pnlClickArea As Panel
	Private hasMoved As Boolean
	Private titleLabel As Label
	Private drawer As B4XDrawer
	Private menuListView As ListView
	Dim menuListViewItemsize As ListView
	Private pnlMenuBgTouch As Panel
	Private clvItems As CustomListView
	Private lblIcon As Label
	Private lblItemName As Label
	Dim inMain As Boolean = True
	Private mainFragment As Panel
	Public lastClickTime As Long = 0
	
	Private m_mode As String
	
	Private MAIN_ACTIVITY_NORMAL_MODE As String = "MAIN_ACTIVITY_NORMAL_MODE"
	Private MAIN_ACTIVITY_SEARCHING_MODE As String = "MAIN_ACTIVITY_SEARCHING_MODE"
	Private MAIN_ACTIVITY_SORTING_MODE As String = "MAIN_ACTIVITY_SORTING_MODE"
	
	Public Const TASK_CHECKED_ROOT_COLOR As Int = Colors.RGB(235, 235, 235)
	Public Const TASK_CHECKED_TEXT_COLOR As Int = Colors.RGB(175, 175, 175)
	Public Const TASK_UNCHECKED_TEXT_COLOR As Int = Colors.RGB(0, 0, 0)
	Public Const TASK_UNCHECKED_ROOT_COLOR As Int = Colors.RGB(255, 255, 255)
	
	
	


	
	
	Private pnlSearch As Panel
	Private pnlTitleBar As Panel
	Private searchFragment As Panel
	Private separator As Panel
End Sub

Sub Activity_Create(FirstTime As Boolean)
	drawer.Initialize(Me, "Drawer", Activity, 300dip)
	drawer.CenterPanel.LoadLayout("layout")
	mainFragment.LoadLayout("newFragment")
	drawer.LeftPanel.LoadLayout("drawerLayout")
	drawerItems
	listview_init
	'Activity.LoadLayout("Layout")
	
	
End Sub

Sub Activity_Resume
	' Remove all items to update data and avoid data duplication.
	ToDoList.Clear
	LoadItems
	
	Starter.CheckInstanceState
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Private Sub btnAdd_Click
	' Set the editor mode by submitting the requested value into the InstanceState bundle.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_MODE, Starter.EDITOR_MODE_CREATE)
	
	' Start the activity.
	StartActivity(EditorActivity)
End Sub

Private Sub chkToDoItem_CheckedChange(Checked As Boolean)
	' Cancel the function if Sender is null.
	If Sender == Null Then
		Return
	End If
	
	' Retrieve the index of item clicked.
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	
	' Retrieve the viewHolder of item clicked based on the index value.
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	' Retrieve the item from the database based on the DB-based ID stored in the viewHolder.
	Dim item As ToDo = Starter.TaskViewModelInstance.GetTask(viewHolder.ID)
	
	' Update the checked value of the task.
	item.Done = Checked
	
	' Since the item has been changed, update the database.
	Starter.TaskViewModelInstance.UpdateTask(item)
	
	' Add visual indicator that the task has been changed
	If Checked == True Then
		' Make the items return to its original look after the task is marked as
		' incomplete.
		viewHolder.TaskCheckbox.TextColor = TASK_CHECKED_TEXT_COLOR
		viewHolder.TaskInfo.TextColor = TASK_CHECKED_TEXT_COLOR
		viewHolder.Root.Color = TASK_CHECKED_ROOT_COLOR
	Else
		' Make the items looks slightly lighter after task completion.
		viewHolder.TaskCheckbox.TextColor = TASK_UNCHECKED_TEXT_COLOR
		viewHolder.TaskInfo.TextColor = TASK_UNCHECKED_TEXT_COLOR
		viewHolder.Root.Color = TASK_UNCHECKED_ROOT_COLOR
	End If
End Sub

' Creates and returns a panel for items loaded into the ToDoList.
Private Sub CreateItem(viewHolder As TaskViewHolder) As B4XView
	' Create a root panel
	Dim panel As B4XView = xui.CreatePanel("")
	
	' Set properties into the root panel
	panel.SetLayoutAnimated(0, 0, 0, 100%x, 70dip)
	panel.LoadLayout("TaskItemLayout")
	panel.SetColorAndBorder(Colors.White, 0, Colors.White, 0)
	
	' Bind the root panel
	viewHolder.Root = panel
	
	Return panel
End Sub

' Binds task data into the task view.
Private Sub BindItem(item As ToDo, viewHolder As TaskViewHolder)
	' Bind the checkbox
	viewHolder.TaskCheckbox = chkToDoItem
	' Bind the view for task info
	viewHolder.TaskInfo = toDoItemInfo
	' Bind the task title
	viewHolder.TaskCheckbox.Text = item.GetTitle
	' Bind the glance information
	viewHolder.TaskInfo.Text = item.GetGlance
	' Make a reference to the task_id from the database.
	viewHolder.ID = item.GetId
	' Bind the panel into the view holder.
	viewHolder.TaskPanel = pnlClickArea
	
	' Bind the checked value. Must be placed in this part in order since this
	' triggers the chkToDoItem_CheckedChange event.
	viewHolder.TaskCheckbox.Checked = item.Done
End Sub

' Loads the items.
Private Sub LoadItems()

' Initialize a list.
	Dim items As List
	items.Initialize
	
	' Testing code for item sorting and searching.
	' items = Starter.TaskViewModelInstance.FindTasksByDueDate(DateTime.Now - 86400000, DateTime.Now + (86400000 * 2), True)
	'Dim repeat(7) As Boolean = Array As Boolean(True, False, True, False, False, False, False)
	
	'items = Starter.TaskViewModelInstance.FindTasksByRepeat(repeat, True)
	
	' Obtain all tasks from the database.
	items = Starter.TaskViewModelInstance.GetAllTasks()
	
	' Null check the list.
	If items.IsInitialized Then
		' Iterate each item.
		For Each item As ToDo In items
			' Initialize a ViewHolder
			Dim viewHolder As TaskViewHolder
			viewHolder.Initialize
			
			' Add items into the list view by binding the viewholder and the data.
			ToDoList.Add(CreateItem(viewHolder), viewHolder)
			
			' Bind the currently referenced vieHolder that ToDoList points to into there
			' currently iterated data.
			BindItem(item, viewHolder)
		Next
	End If
End Sub


Sub menuBtn_Click
	If button_handling Then
		pnlMenuBgTouch.BringToFront
		menuListView.SetVisibleAnimated(250, True)
		menuListView.BringToFront
		menuListView.SetLayoutAnimated(250, menuListViewItemsize.Left, menuListViewItemsize.Top, menuListViewItemsize.Width, menuListViewItemsize.Height)
	End If
End Sub

Private Sub pnlMenuBgTouch_Touch (Action As Int, X As Float, Y As Float)
	Select Action
		Case Activity.ACTION_DOWN
			If menuListView.Visible = True Then
				pnlMenuBgTouch.SendToBack
				menuListView.SetLayoutAnimated(250, 1080, 0, 0, 228)
				menuListView.SetVisibleAnimated(500, False)
				
			End If
	End Select
End Sub

Private Sub menuListView_ItemClick (Position As Int, Value As Object)
	Select Position
		Case 0
			ToastMessageShow("Refereshed", False)
			pnlMenuBgTouch.SendToBack
			menuListView.SetLayoutAnimated(250, 1080, 0, 0, 228)
			menuListView.SetVisibleAnimated(500, False)
			
			
			
		Case 1
			ToastMessageShow("Sort", False)
			pnlMenuBgTouch.SendToBack
			menuListView.SetLayoutAnimated(250, 1080, 0, 0, 228)
			menuListView.SetVisibleAnimated(500, False)
			
			
		Case 2
			StartActivity(SettingsActivity)
			pnlMenuBgTouch.SendToBack
			menuListView.SetLayoutAnimated(250, 1080, 0, 0, 228)
			menuListView.SetVisibleAnimated(500, False)
			
	End Select
End Sub



' Opens EditorActivity to edit a clicked task.
Private Sub pnlClickArea_Click
	SetIdAsExtra
	
	' Set the EditorActivity mode into edit mode.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_MODE, Starter.EDITOR_MODE_EDIT)
	
	StartActivity(EditorActivity)
End Sub

' Opens the Task Viewer to view a task in detail.
Sub pnlViewArea_Click
	SetIdAsExtra
	
	StartActivity(TaskViewerActivity)
End Sub

' Retrieves the ID and sets the DB-based ID of the clicked task as an extra for use in other
' activities.
Private Sub SetIdAsExtra
	' Obtain the index of the clicked item from the ListView.
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	
	' Obtain the viewHlder that is bound into the view.
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	' Retrieve the task_id bound into the viewHolder and set that ID into the extras.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_TASK_ID, viewHolder.ID)
End Sub


Sub pnlViewArea_Touch (Action As Int, X As Float, Y As Float)
	' Obtains the index of the clciked
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	' gets the viewholder
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	
	Select Action
		Case Activity.ACTION_DOWN ' sets bgcolor of pnl to gray if held
			hasMoved = False
			
			' Set the main click color.
			viewHolder.Root.SetColorAnimated(50, Colors.White, Colors.Gray)
            
		Case Activity.ACTION_MOVE 'sets bgcolor of pnl to white or gray if touch is held and moved
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(100, viewHolder)
				
			End If
            
		Case Activity.ACTION_UP 'starts activity if touch is released
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(100, viewHolder)
				
				' Retrieve the task_id bound into the viewHolder and set that ID into the extras.
				Starter.InstanceState.Put(Starter.EXTRA_EDITOR_TASK_ID, viewHolder.ID)
				
				StartActivity(TaskViewerActivity)
			End If
		
		Case 3
			' only processes if touch has not moved yet 
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(50, viewHolder)
				
			End If
			
		
       End Select
End Sub

' Used to process the click style of panels above the checkbox of tasks.
Public Sub OnChkboxViewAreaClick(percentage As Int, viewHolder As TaskViewHolder)
	' Touch color differs whether the item is marked as complete or not.
	If viewHolder.TaskCheckbox.Checked Then
		' Execute if task is marked as complete
		viewHolder.Root.SetColorAnimated(percentage, Colors.Gray, TASK_CHECKED_ROOT_COLOR)
	Else
		' Execute if task is not marked as complete
		viewHolder.Root.SetColorAnimated(percentage, Colors.Gray, TASK_UNCHECKED_ROOT_COLOR)
	End If
End Sub

Private Sub drawerButton_Click
	If button_handling Then
		drawer.LeftOpen = True
	End If
End Sub

Private Sub listview_init
		menuListView.Visible = False
		menuListView.AddSingleLine2("	Refresh", 1)
		menuListView.AddSingleLine2("	Sort", 2)
		menuListView.AddSingleLine2("	Settings", 3)
		menuListView.SingleLineLayout.Label.TextSize = 15
		menuListView.SingleLineLayout.Label.TextColor = Colors.Black
		menuListView.SingleLineLayout.ItemHeight = 43dip
		
		Dim cd As ColorDrawable
		cd.Initialize(Colors.White, 3dip)
		
		menuListView.Background = cd
		
		
		menuListViewItemsize.Initialize("")
		menuListViewItemsize.SetLayout(menuListView.Left, menuListView.Top, menuListView.Width, menuListView.Height)
		
		menuListView.SetLayoutAnimated(200,100%x, 0%y, 0, 114dip)
		pnlMenuBgTouch.SendToBack
		
		Dim javaobj As JavaObject = menuListView
		javaobj.RunMethod("setDivider", Array(Null))
		javaobj.RunMethod("setDividerHeight", Array(0))
End Sub

Sub drawerItems
	clvItems.sv.ScrollViewInnerPanel.Color = xui.Color_Transparent
	clvItems.sv.Color = xui.Color_Transparent
	
	Dim items As List
	items.Initialize
	items.Add(CreateMap("icon": "", "text": "My Day"))
	items.Add(CreateMap("icon": "", "text": "Planned"))
	items.Add(CreateMap("icon": "", "text": "Completed"))
	items.Add(CreateMap("icon": "", "text": "All"))
	items.Add(CreateMap("icon": "", "text": "Trash"))


	For Each item As Map In items
		Dim iconText As String = item.Get("icon")
		Dim itemText As String = item.Get("text")
		    
		Dim p As B4XView = xui.CreatePanel("")
		p.SetLayoutAnimated(0, 0, 0, 100%x, 60dip)
		p.LoadLayout("drawerItems")

		
		Dim innerPanel As B4XView = p.GetView(0)
		Dim icon As B4XView = innerPanel.GetView(0)
		Dim itemName As B4XView = innerPanel.GetView(1)
		

		icon.Text = iconText
		itemName.Text = itemText
		
		p.SetColorAndBorder(Colors.White, 0, Colors.Transparent, 0)
		innerPanel.SetColorAndBorder(Colors.White, 0, Colors.Transparent, 0)
		icon.SetColorAndBorder(Colors.White, 0, Colors.Transparent, 0)
		itemName.SetColorAndBorder(Colors.White, 0, Colors.Transparent, 0)
		clvItems.Add(p, itemText)
	Next
	
	Dim sepPanel As B4XView = xui.CreatePanel("")
	sepPanel.SetLayoutAnimated(0, 0, 0, 100%x, 2dip) ' 2dip height for the separator
	Dim innerSep As B4XView = xui.CreatePanel("")
	innerSep.SetLayoutAnimated(0, 5%x, 0, 45.56%x, 2dip) ' 80% width, centered (10% margin on each side)
	innerSep.Color = xui.Color_LightGray
	sepPanel.AddView(innerSep, 5%x, 0, 45.56%x, 2dip)
	sepPanel.Enabled = False
	innerSep.Enabled = False	
	
	clvItems.Add(sepPanel, "separator")
	

	Log(Activity.Width)
	Log(drawer.LeftPanel.Width)
	
End Sub

Private Sub clvItems_ItemClick (Index As Int, Value As Object)
	If Value = "separator" Then
		' Reset selection to previous item
		clvItems.GetPanel(Index).Color = xui.Color_Transparent
		Return
	End If
	Select Index
		Case 0
			ToastMessageShow("my day", False)
			drawer.LeftOpen = False
			If inMain = False Then
				mainFragment.RemoveAllViews
				mainFragment.LoadLayout("newFragment")
				LoadItems
				drawer.LeftOpen = False
				inMain = True
			End If
		Case 1
			ToastMessageShow("planned", False)
			mainFragment.RemoveAllViews
			mainFragment.LoadLayout("newFragment")
			Dim p As B4XView = xui.CreatePanel("")
			p.SetLayoutAnimated(200, 0, 0, 100%x, 60dip)
			Dim lbl As Label
			lbl.Initialize("")          ' No event name is needed unless you plan to handle label events
			lbl.Text = "placeholder text for planned"
			lbl.TextSize = 18
			lbl.TextColor = Colors.Black
			lbl.Gravity = Gravity.CENTER
			p.AddView(lbl, 5dip, 5dip, 100%x, 20dip)
			ToDoList.Add(p, "")
			
			
			drawer.LeftOpen = False
			inMain = False
		Case 2
			ToastMessageShow("Complete", False)
			mainFragment.RemoveAllViews
			mainFragment.LoadLayout("newFragment")
			Dim p As B4XView = xui.CreatePanel("")
			p.SetLayoutAnimated(200, 0, 0, 100%x, 60dip)
			Dim lbl As Label
			lbl.Initialize("")          ' No event name is needed unless you plan to handle label events
			lbl.Text = "placeholder text for Completed"
			lbl.TextSize = 18
			lbl.TextColor = Colors.Black
			lbl.Gravity = Gravity.CENTER
			p.AddView(lbl, 5dip, 5dip, 100%x, 20dip)
			ToDoList.Add(p, "")
			
			
			drawer.LeftOpen = False
			inMain = False
		Case 3
			ToastMessageShow("All", False)
			mainFragment.RemoveAllViews
			mainFragment.LoadLayout("newFragment")
			Dim p As B4XView = xui.CreatePanel("")
			p.SetLayoutAnimated(200, 0, 0, 100%x, 60dip)
			Dim lbl As Label
			lbl.Initialize("")          ' No event name is needed unless you plan to handle label events
			lbl.Text = "placeholder text for All"
			lbl.TextSize = 18
			lbl.TextColor = Colors.Black
			lbl.Gravity = Gravity.CENTER
			p.AddView(lbl, 5dip, 5dip, 100%x, 20dip)
			ToDoList.Add(p, "")
			drawer.LeftOpen = False
			inMain = False
		Case 4
			ToastMessageShow("Trash", False)
			mainFragment.RemoveAllViews
			mainFragment.LoadLayout("newFragment")
			Dim p As B4XView = xui.CreatePanel("")
			p.SetLayoutAnimated(200, 0, 0, 100%x, 60dip)
			Dim lbl As Label
			lbl.Initialize("")          ' No event name is needed unless you plan to handle label events
			lbl.Text = "placeholder text for Trash"
			lbl.TextSize = 18
			lbl.TextColor = Colors.Black
			lbl.Gravity = Gravity.CENTER
			p.AddView(lbl, 5dip, 5dip, 100%x, 20dip)
			ToDoList.Add(p, "")
			drawer.LeftOpen = False
			inMain = False
	End Select
End Sub



Private Sub searchBtn_Click
	If button_handling Then
		pnlSearch.SetLayout(pnlTitleBar.Left, pnlTitleBar.Top, 100%x, pnlTitleBar.Height)
		pnlSearch.SetVisibleAnimated(150, True)
		pnlSearch.BringToFront
		
		searchFragment.SetLayout(mainFragment.Left, mainFragment.Top, mainFragment.Width, mainFragment.Height)
		searchFragment.SetVisibleAnimated(150, True)
		searchFragment.BringToFront
		
		mainFragment.Visible = False
		pnlTitleBar.Visible = False
	End If
End Sub

Private Sub backBtn_Click
	If button_handling Then
		Dim fadeout As Animation
		fadeout.InitializeAlpha("fade", 1, 0)
		fadeout.Duration = 150
		
		mainFragment.Visible = True
		pnlTitleBar.Visible = True
		
		fadeout.Start(pnlSearch)
		fadeout.Start(searchFragment)
		
		pnlSearch.Visible = False
		searchFragment.Visible = False
		
		pnlSearch.SendToBack
		searchFragment.SendToBack
	End If
End Sub

Public Sub button_handling As Boolean
	Dim now As Long = DateTime.Now
	If now - lastClickTime < 500 Then
		' Less than 300ms since last click, ignore
		Return False
	End If
	lastClickTime = now ' Update the time of the last click
	Return True
End Sub

Private Sub enterBtn_Click
	ToastMessageShow("startactivity", False)
	'StartActivity(searchactivity)
End Sub