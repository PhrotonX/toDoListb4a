Build1=Default,com.cm.todolist
File1=3528206.png
File10=Layout.bal
File11=settingsabout.bal
File12=settingshelp.bal
File13=settingslayout.bal
File14=sviewlayout.bal
File15=TaskItemLayout.bal
File16=taskviewlayout.bal
File17=taskviewscrolllayout.bal
File2=aboutitems.bal
File3=AttachmentItemLayout.bal
File4=EditorLayout.bal
File5=EditorScrollLayout.bal
File6=folder.png
File7=helpitems.bal
File8=ic_launcher.png
File9=ic_launcher_xl.png
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=core
Library2=sql
Library3=xcustomlistview
Library4=xui
Library5=nb6
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="15"~\n~android:targetSdkVersion="34" />~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~AddPermission(android.permission.READ_EXTERNAL_STORAGE)~\n~AddPermission(android.permission.WRITE_EXTERNAL_STORAGE)~\n~'End of default text.~\n~
Module1=Attachment
Module10=EditorActivity
Module11=SettingsAbout
Module12=SettingsActivity
Module13=SettingsHelp
Module14=Starter
Module15=TaskDao
Module16=TaskRepository
Module17=TaskViewerActivity
Module18=TaskViewHolder
Module19=TaskViewModel
Module2=AttachmentDao
Module20=Time
Module21=ToDo
Module22=ToDoDatabase
Module3=AttachmentRepository
Module4=AttachmentViewHolder
Module5=AttachmentViewModel
Module6=DatabaseUtils
Module7=Date
Module8=DateAndTime
Module9=DaysOfTheWeek
NumberOfFiles=17
NumberOfLibraries=5
NumberOfModules=22
Version=13.1
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: To Do List
	#VersionCode: 5
	#VersionName: v2.0.0.1 alpha
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	Private ToDoList As CustomListView
	Private chkToDoItem As CheckBox
	Private toDoItemInfo As Label
	Private settingsBtn As Button
	Private btnAdd As Button
	Private pnlClickArea As Panel
	Private hasMoved As Boolean
	Private titleLabel As Label
	
	Private m_mode As String
	
	Private MAIN_ACTIVITY_NORMAL_MODE As String = "MAIN_ACTIVITY_NORMAL_MODE"
	Private MAIN_ACTIVITY_SEARCHING_MODE As String = "MAIN_ACTIVITY_SEARCHING_MODE"
	Private MAIN_ACTIVITY_SORTING_MODE As String = "MAIN_ACTIVITY_SORTING_MODE"
	
	Public Const TASK_CHECKED_ROOT_COLOR As Int = Colors.RGB(235, 235, 235)
	Public Const TASK_CHECKED_TEXT_COLOR As Int = Colors.RGB(175, 175, 175)
	Public Const TASK_UNCHECKED_TEXT_COLOR As Int = Colors.RGB(0, 0, 0)
	Public Const TASK_UNCHECKED_ROOT_COLOR As Int = Colors.RGB(255, 255, 255)
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("Layout")
End Sub

Sub Activity_Resume
	' Remove all items to update data and avoid data duplication.
	ToDoList.Clear
	
	LoadItems
	buttons_layout
	
	Starter.CheckInstanceState
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Private Sub btnAdd_Click
	' Set the editor mode by submitting the requested value into the InstanceState bundle.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_MODE, Starter.EDITOR_MODE_CREATE)
	
	' Start the activity.
	StartActivity(EditorActivity)
End Sub

Private Sub chkToDoItem_CheckedChange(Checked As Boolean)
	' Cancel the function if Sender is null.
	If Sender == Null Then
		Return
	End If
	
	' Retrieve the index of item clicked.
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	
	' Retrieve the viewHolder of item clicked based on the index value.
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	' Retrieve the item from the database based on the DB-based ID stored in the viewHolder.
	Dim item As ToDo = Starter.TaskViewModelInstance.GetTask(viewHolder.ID)
	
	' Update the checked value of the task.
	item.Done = Checked
	
	' Since the item has been changed, update the database.
	Starter.TaskViewModelInstance.UpdateTask(item)
	
	' Add visual indicator that the task has been changed
	If Checked == True Then
		' Make the items return to its original look after the task is marked as
		' incomplete.
		viewHolder.TaskCheckbox.TextColor = TASK_CHECKED_TEXT_COLOR
		viewHolder.TaskInfo.TextColor = TASK_CHECKED_TEXT_COLOR
		viewHolder.Root.Color = TASK_CHECKED_ROOT_COLOR
	Else
		' Make the items looks slightly lighter after task completion.
		viewHolder.TaskCheckbox.TextColor = TASK_UNCHECKED_TEXT_COLOR
		viewHolder.TaskInfo.TextColor = TASK_UNCHECKED_TEXT_COLOR
		viewHolder.Root.Color = TASK_UNCHECKED_ROOT_COLOR
	End If
End Sub

' Creates and returns a panel for items loaded into the ToDoList.
Private Sub CreateItem(viewHolder As TaskViewHolder) As B4XView
	' Create a root panel
	Dim panel As B4XView = xui.CreatePanel("")
	
	' Set properties into the root panel
	panel.SetLayoutAnimated(0, 0, 0, 100%x, 70dip)
	panel.LoadLayout("TaskItemLayout")
	panel.SetColorAndBorder(Colors.White, 0, Colors.White, 0)
	
	' Bind the root panel
	viewHolder.Root = panel
	
	Return panel
End Sub

' Binds task data into the task view.
Private Sub BindItem(item As ToDo, viewHolder As TaskViewHolder)
	' Bind the checkbox
	viewHolder.TaskCheckbox = chkToDoItem
	' Bind the view for task info
	viewHolder.TaskInfo = toDoItemInfo
	' Bind the task title
	viewHolder.TaskCheckbox.Text = item.GetTitle
	' Bind the glance information
	viewHolder.TaskInfo.Text = item.GetGlance
	' Make a reference to the task_id from the database.
	viewHolder.ID = item.GetId
	' Bind the panel into the view holder.
	viewHolder.TaskPanel = pnlClickArea
	
	' Bind the checked value. Must be placed in this part in order since this
	' triggers the chkToDoItem_CheckedChange event.
	viewHolder.TaskCheckbox.Checked = item.Done
End Sub

' Loads the items.
Private Sub LoadItems()

' Initialize a list.
	Dim items As List
	items.Initialize
	
	' Testing code for item sorting and searching.
	' items = Starter.TaskViewModelInstance.FindTasksByDueDate(DateTime.Now - 86400000, DateTime.Now + (86400000 * 2), True)
	'Dim repeat(7) As Boolean = Array As Boolean(True, False, True, False, False, False, False)
	
	'items = Starter.TaskViewModelInstance.FindTasksByRepeat(repeat, True)
	
	' Obtain all tasks from the database.
	items = Starter.TaskViewModelInstance.GetAllTasks()
	
	' Null check the list.
	If items.IsInitialized Then
		' Iterate each item.
		For Each item As ToDo In items
			' Initialize a ViewHolder
			Dim viewHolder As TaskViewHolder
			viewHolder.Initialize
			
			' Add items into the list view by binding the viewholder and the data.
			ToDoList.Add(CreateItem(viewHolder), viewHolder)
			
			' Bind the currently referenced vieHolder that ToDoList points to into there
			' currently iterated data.
			BindItem(item, viewHolder)
		Next
	End If
End Sub

' Adds functionality to move into another activity.
Sub settingsBtn_Click
	StartActivity(SettingsActivity)
End Sub

Sub buttons_layout
	'btnAdd design
	btnAdd.Top = Activity.Height - btnAdd.Height - 20dip
	btnAdd.Left = (Activity.Width - btnAdd.Width) / 2
	
	'settingsBtn design
	Dim bgTransparent As ColorDrawable
	bgTransparent.Initialize(Colors.Transparent, 0)
	settingsBtn.Background = bgTransparent
	
	Dim c As Canvas
	c.Initialize(titleLabel)
	Dim borderColor As Int = Colors.RGB(209, 209, 209)
	Dim borderHeight As Int = 1dip

	
	c.DrawLine(0, titleLabel.Height - borderHeight / 2, titleLabel.Width, titleLabel.Height - borderHeight / 2, borderColor, borderHeight)

	titleLabel.Invalidate
End Sub

' Opens EditorActivity to edit a clicked task.
Private Sub pnlClickArea_Click
	SetIdAsExtra
	
	' Set the EditorActivity mode into edit mode.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_MODE, Starter.EDITOR_MODE_EDIT)
	
	StartActivity(EditorActivity)
End Sub

' Opens the Task Viewer to view a task in detail.
Sub pnlViewArea_Click
	SetIdAsExtra
	
	StartActivity(TaskViewerActivity)
End Sub

' Retrieves the ID and sets the DB-based ID of the clicked task as an extra for use in other
' activities.
Private Sub SetIdAsExtra
	' Obtain the index of the clicked item from the ListView.
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	
	' Obtain the viewHlder that is bound into the view.
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	' Retrieve the task_id bound into the viewHolder and set that ID into the extras.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_TASK_ID, viewHolder.ID)
End Sub


Sub pnlViewArea_Touch (Action As Int, X As Float, Y As Float)
	' Obtains the index of the clciked
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	' gets the viewholder
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	
	Select Action
		Case Activity.ACTION_DOWN ' sets bgcolor of pnl to gray if held
			hasMoved = False
			
			' Set the main click color.
			viewHolder.Root.SetColorAnimated(50, Colors.White, Colors.Gray)
            
		Case Activity.ACTION_MOVE 'sets bgcolor of pnl to white or gray if touch is held and moved
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(100, viewHolder)
				
			End If
            
		Case Activity.ACTION_UP 'starts activity if touch is released
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(100, viewHolder)
				
				' Retrieve the task_id bound into the viewHolder and set that ID into the extras.
				Starter.InstanceState.Put(Starter.EXTRA_EDITOR_TASK_ID, viewHolder.ID)
				
				StartActivity(TaskViewerActivity)
			End If
		
		Case 3
			' only processes if touch has not moved yet 
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(50, viewHolder)
				
			End If
			
		
       End Select
End Sub

' Used to process the click style of panels above the checkbox of tasks.
Public Sub OnChkboxViewAreaClick(percentage As Int, viewHolder As TaskViewHolder)
	' Touch color differs whether the item is marked as complete or not.
	If viewHolder.TaskCheckbox.Checked Then
		' Execute if task is marked as complete
		viewHolder.Root.SetColorAnimated(percentage, Colors.Gray, TASK_CHECKED_ROOT_COLOR)
	Else
		' Execute if task is not marked as complete
		viewHolder.Root.SetColorAnimated(percentage, Colors.Gray, TASK_UNCHECKED_ROOT_COLOR)
	End If
End Sub