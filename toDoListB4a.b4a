Build1=Default,com.cm.todolist
File1=3528206.png
File10=EditorLayout.bal
File11=EditorScrollLayout.bal
File12=emptytasks.bal
File13=folder.png
File14=GREEN.png
File15=GREEN-SELECTED.png
File16=groupTasksLayout.bal
File17=groupTasksSVLayout.bal
File18=helpitems.bal
File19=ic_launcher.png
File2=486023921_623831243812785_3842496593750662642_n (1).png
File20=ic_launcher_small.png
File21=ic_launcher_xl.png
File22=INDIGO.png
File23=INDIGO-SELECTED.png
File24=Layout.bal
File25=newfragment.bal
File26=ORANGE.png
File27=ORANGE-SELECTED.PNG
File28=pencil.png
File29=PINK.png
File3=aboutitems.bal
File30=PINK-SELECTED.png
File31=RED.png
File32=RED-SELECTED.png
File33=searchByLayout.bal
File34=searchfragmentlayout.bal
File35=searchFragmentSVLayout.bal
File36=separatorlayout.bal
File37=settingsabout.bal
File38=settingshelp.bal
File39=settingslayout.bal
File4=AttachmentItemLayout.bal
File40=solid_white.png
File41=stock4.png
File42=sviewlayout.bal
File43=TaskItemLayout.bal
File44=taskviewlayout.bal
File45=taskviewscrolllayout.bal
File46=test.bal
File47=YELLOW.png
File48=YELLOW-SELECTED.png
File5=BLUE.png
File6=BLUE-SELECTED.png
File7=canvas.bal
File8=draweritems.bal
File9=drawerlayout.bal
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=Default Group
FileGroup29=Default Group
FileGroup3=Default Group
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup35=Default Group
FileGroup36=Default Group
FileGroup37=Default Group
FileGroup38=Default Group
FileGroup39=Default Group
FileGroup4=Default Group
FileGroup40=Default Group
FileGroup41=Default Group
FileGroup42=Default Group
FileGroup43=Default Group
FileGroup44=Default Group
FileGroup45=Default Group
FileGroup46=Default Group
FileGroup47=Default Group
FileGroup48=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=animation
Library10=runtimepermissions
Library11=sql
Library12=xcustomlistview
Library13=xui
Library14=fileprovider
Library2=b4xdrawer
Library3=contentresolver
Library4=core
Library5=javaobject
Library6=keyvaluestore
Library7=nb6
Library8=phone
Library9=reflection
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="24"~\n~android:targetSdkVersion="33" />~\n~<supports-screens android:largeScreens="true" ~\n~	android:debuggable="true"~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.WRITE_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="33" />~\n~)~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.READ_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="33" />~\n~)~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.MANAGE_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="33" />~\n~)~\n~~\n~AddApplicationText(~\n~  <provider~\n~  android:name="android.support.v4.content.FileProvider"~\n~  android:authorities="$PACKAGE$.provider"~\n~  android:exported="false"~\n~  android:grantUriPermissions="true">~\n~  <meta-data~\n~  android:name="android.support.FILE_PROVIDER_PATHS"~\n~  android:resource="@xml/provider_paths"/>~\n~  </provider>~\n~)~\n~CreateResource(xml, provider_paths,~\n~   <files-path name="name" path="" />~\n~)~\n~'End of default text.~\n~
Module1=Attachment
Module10=DaysOfTheWeek
Module11=Dimen
Module12=EditorActivity
Module13=FileUtils
Module14=Group
Module15=GroupDao
Module16=GroupRepository
Module17=GroupViewHolder
Module18=GroupViewModel
Module19=Repeat
Module2=AttachmentDao
Module20=RepeatDao
Module21=RepeatRepository
Module22=RepeatViewModel
Module23=SettingsAbout
Module24=SettingsActivity
Module25=SettingsHelp
Module26=SettingsRepository
Module27=SettingsViewModel
Module28=Snooze
Module29=Starter
Module3=AttachmentFileRepository
Module30=SubGroupViewHolder
Module31=TaskDao
Module32=TaskGroupActivity
Module33=TaskNotification
Module34=TaskNotificationCompleteReceiver
Module35=TaskNotificationDismissReceiver
Module36=TaskNotificationSnoozeReceiver
Module37=TaskQuery
Module38=TaskRepository
Module39=TaskViewerActivity
Module4=AttachmentRepository
Module40=TaskViewHolder
Module41=TaskViewModel
Module42=Theme
Module43=Time
Module44=ToDo
Module45=ToDoDatabase
Module46=ToDoDatabaseViewModel
Module47=ToDoFileSystem
Module5=AttachmentViewHolder
Module6=AttachmentViewModel
Module7=DatabaseUtils
Module8=Date
Module9=DateAndTime
NumberOfFiles=48
NumberOfLibraries=14
NumberOfModules=47
Version=13.1
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: To Do List
	#VersionCode: 12
	#VersionName: v2.0.0.4 alpha
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
	#MultiDex: True
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	Private ToDoList As CustomListView
	Private chkToDoItem As CheckBox
	Private toDoItemInfo As Label
	Private menuBtn As Button
	Private btnAdd As Button
	Private pnlClickArea As Panel
	Private hasMoved As Boolean
	Private titleLabel As Label
	Private drawer As B4XDrawer
	Private menuListView As ListView
	Dim menuListViewItemsize As ListView
	Private pnlMenuBgTouch As Panel
	Private clvItems As CustomListView
	Dim inMain As Boolean = True
	Private mainFragment As Panel
	Public lastClickTime As Long = 0
	
	Private m_mode As String
	
	Public Const TASK_CHECKED_ROOT_COLOR As Int = Colors.RGB(235, 235, 235)
	Public Const TASK_CHECKED_TEXT_COLOR As Int = Colors.RGB(175, 175, 175)
	Public Const TASK_UNCHECKED_TEXT_COLOR As Int = Colors.RGB(0, 0, 0)
	Public Const TASK_UNCHECKED_ROOT_COLOR As Int = Colors.RGB(255, 255, 255)	
	
	Private pnlSearch As Panel
	Private pnlTitleBar As Panel
	Private searchFragment As Panel
	Private separator As Panel
	Private groupPanel As Panel
	Private lblGroupIcon As Label
	Private lblGroupName As Label
	Private m_tasks As List
	Private Panel1 As Panel
	Private pnlmenuListView As Panel
	
	Private smartLists(5) As Group
	
	Private Const SMART_LIST_NONE As Int = -1
	Private Const SMART_LIST_MY_DAY As Int = 0
	Private Const SMART_LIST_PLANNED As Int = 1
	Private Const SMART_LIST_COMPLETED As Int = 2
	Private Const SMART_LIST_ALL As Int = 3
	Private Const SMART_LIST_TASKS As Int = 5
	Private Const SMART_LIST_TRASH As Int = 6
	Private Const SMART_LIST_SEARCH As Int = 7
	'Private Const SMART_LIST_SORT As Int = 8
	
	Private Const MENU_ITEM_REFRESH As Int = 0
	Private Const MENU_ITEM_SORT As Int = 1
	Private Const MENU_ITEM_SETTINGS As Int = 2

	Private m_savedSmartList As Int = SMART_LIST_MY_DAY
	Private m_savedGroup As Group
	'Private m_savedSearchByDueDateIdentifer As String = ""
	'Private m_savedSearchByDueDateRange1 As Date
	'Private m_savedSearchByDueDateRange2 As Date
	'Private m_savedSearchByRepeat(7) As Boolean
	'Private m_savedSearchByPriority As Int = -1
	Private m_query As TaskQuery
	
	Private m_itemsLoaded As Boolean = False
	

	Private pnlSortDialogue As Panel
	Private pnlSortDialoguebg As Panel
	Private radioAsc As RadioButton
	Private radioDesc As RadioButton
	Private radioSortByCreaion As RadioButton
	Private radioSortByDD As RadioButton
	Private radioSortByPrio As RadioButton
	Private radioSortByTitle As RadioButton
	Private svSearchBody As ScrollView
	Private checkFBPriority As CheckBox
	Private checkFBRepeat As CheckBox
	Private checkFBDueDate As CheckBox
	Private checkFBGroup As CheckBox
	Private radioPrioCritical As RadioButton
	Private radioPrioHigh As RadioButton
	Private radioPrioMedium As RadioButton
	Private radioPrioLow As RadioButton
	Private pnlFBDueDate As Panel
	Private pnlFBGroupName As Panel
	Private pnlFBPriority As Panel
	Private pnlFBRepeat As Panel
	Private radioDueSpecificDate As RadioButton
	Private radioDueSpecificDateGroup As RadioButton
	Private radioDueSpecificDateRange As RadioButton
	Private spinDateDay As Spinner
	Private spinDateGroup As Spinner
	Private spinDateMonth As Spinner
	Private spinRangeDay As Spinner
	Private spinRangeMonth As Spinner
	Private txtDateYear As EditText
	Private txtRangeYear As EditText
	Private pnlDueSpecificDate As Panel
	Private pnlDueSpecificDateRange As Panel
	Private pnlDueSpecificDateGroup As Panel
End Sub

Sub Activity_Create(FirstTime As Boolean)
	'ToDoList.AnimationDuration = 0
	
	drawer.Initialize(Me, "Drawer", Activity, 300dip)
	drawer.CenterPanel.LoadLayout("layout")
	mainFragment.LoadLayout("newFragment")
	drawer.LeftPanel.LoadLayout("drawerLayout")
	LoadDrawerItems
	listview_init
	
	m_tasks.Initialize
	m_savedGroup = smartLists(0) ' Get the My Day smart list
	
	m_query.Initialize()
	
	Starter.Permissions.CheckAndRequest(Starter.Permissions.PERMISSION_POST_NOTIFICATIONS)
End Sub

Sub Activity_Resume
	' Remove all items to update data and avoid data duplication.
	ToDoList.Clear
	LoadItems
	
	Starter.CheckInstanceState
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub



Private Sub btnAdd_Click
	' Set the editor mode by submitting the requested value into the InstanceState bundle.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_MODE, Starter.EDITOR_MODE_CREATE)
	
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_GROUP_ID, m_savedGroup.GetID)
	
	' Start the activity.
	StartActivity(EditorActivity)
End Sub

Private Sub chkToDoItem_CheckedChange(Checked As Boolean)
	' Cancel the function if Sender is null.
	If Sender == Null Then
		Return
	End If
	
	' Retrieve the index of item clicked.
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	
	' Retrieve the viewHolder of item clicked based on the index value.
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	' Retrieve the item from the database based on the DB-based ID stored in the viewHolder.
	Dim item As ToDo = Starter.TaskViewModelInstance.GetTask(viewHolder.ID)
	
	
	' If the value has changed, update the database. This checking is required to prevent duplicate
	' notifications,
	If item.Done <> Checked Then
		' Update the checked value of the task.
		item.Done = Checked
		
		Starter.TaskViewModelInstance.UpdateTask(item)
	End If
	
	If m_query.IsSortingEnabled() == False Then
		Select m_savedSmartList:
			Case SMART_LIST_PLANNED:
				If Checked == True Then
					' Hide the completed task if the current smart list is in "Planned"
					ToDoList.RemoveAt(index)

					' Also remove the subgroup If it exists And the subgroup Is empty.
					Dim prevSubGroup As Object = ToDoList.GetValue(index - 1)
					Dim nextSubGroup As Object
				
					If (index > ToDoList.Size - 1) Then
						nextSubGroup = Null
					Else
						nextSubGroup = ToDoList.GetValue(index)
					End If
				
					If prevSubGroup Is SubGroupViewHolder Then
						If nextSubGroup == Null Then
							ToDoList.RemoveAt(index - 1)
						End If
						If nextSubGroup Is SubGroupViewHolder Then
							ToDoList.RemoveAt(index - 1)
						End If
					End If
				
				End If
			Case SMART_LIST_COMPLETED:
				If Checked == False Then
					' Hide the incomplete task if the current smart list is in "Completed"
					ToDoList.RemoveAt(index)
				End If
			Case Else:
				If Checked == True Then
					' Move the item into the bottom after marking the task as complete.
					ToDoList.RemoveAt(index)
					viewHolder.Root.RemoveViewFromParent
				
					If m_itemsLoaded Then
						ToDoList.InsertAt(ToDoList.Size - 1, viewHolder.Root, viewHolder)
					Else
						ToDoList.Add(viewHolder.Root, viewHolder)
						m_itemsLoaded = True
					End If
				Else
					ToDoList.RemoveAt(index)
					viewHolder.Root.RemoveViewFromParent
					ToDoList.InsertAt(0, viewHolder.Root, viewHolder)
				End If
		End Select
	End If
	
	' Add visual indicator that the task has been changed
	If Checked == True Then
		' Make the items return to its original look after the task is marked as
		' incomplete.
		viewHolder.TaskCheckbox.TextColor = TASK_CHECKED_TEXT_COLOR
		viewHolder.TaskInfo.TextColor = TASK_CHECKED_TEXT_COLOR
		viewHolder.Root.Color = TASK_CHECKED_ROOT_COLOR
	Else
		' Make the items looks slightly lighter after task completion.
		viewHolder.TaskCheckbox.TextColor = TASK_UNCHECKED_TEXT_COLOR
		viewHolder.TaskInfo.TextColor = TASK_UNCHECKED_TEXT_COLOR
		viewHolder.Root.Color = TASK_UNCHECKED_ROOT_COLOR
	End If
End Sub

' Creates and returns a panel for items loaded into the ToDoList.
Private Sub CreateItem(viewHolder As TaskViewHolder) As B4XView
	' Create a root panel
	Dim panel As B4XView = xui.CreatePanel("")
	
	' Set properties into the root panel
	
	panel.SetLayoutAnimated(0, 0, 0, 95%x, 70dip)
	panel.LoadLayout("TaskItemLayout")
	'panel.SetColorAndBorder(Colors.Red, 120, Colors.Green, 5) 
	panel.SetColorAndBorder(Colors.Transparent,0,Colors.Transparent, 0)
	
	' Bind the root panel
	viewHolder.Root = panel
	
	Return panel
End Sub

' Binds task data into the task view.
Private Sub BindItem(item As ToDo, repeatItem As Repeat, viewHolder As TaskViewHolder)
	' Bind the checkbox
	viewHolder.TaskCheckbox = chkToDoItem
	' Bind the view for task info
	viewHolder.TaskInfo = toDoItemInfo
	' Bind the task title
	viewHolder.TaskCheckbox.Text = item.GetTitle
	' Bind the glance information
	viewHolder.TaskInfo.Text = item.GetGlance(repeatItem.GetRepeatInfo)
	' Make a reference to the task_id from the database.
	viewHolder.ID = item.GetId
	' Bind the panel into the view holder.
	viewHolder.TaskPanel = pnlClickArea
	
	' Bind the checked value. Must be placed in this part in order since this
	' triggers the chkToDoItem_CheckedChange event.
	viewHolder.TaskCheckbox.Checked = item.Done
End Sub

' Loads the items.
Private Sub LoadItems()

	m_itemsLoaded = False

	' Initialize a list.
	' Testing code for item sorting and searching.
	' m_tasks = Starter.TaskViewModelInstance.FindTasksByDueDate(DateTime.Now - 86400000, DateTime.Now + (86400000 * 2), True)
	'Dim repeat(7) As Boolean = Array As Boolean(True, False, True, False, False, False, False)
	
	'm_tasks = Starter.TaskViewModelInstance.FindTasksByRepeat(repeat, True)
	
	m_query.SetGroupID(m_savedGroup.GetID)
	
	' Obtain all tasks from the database, depending on the smart list mode.
	Select m_savedSmartList:
		Case SMART_LIST_MY_DAY:
			m_tasks = Starter.TaskViewModelInstance.GetTasksToday(m_query)
		Case SMART_LIST_ALL: 
			m_tasks = Starter.TaskViewModelInstance.GetAllTasksSorted(m_query)
		Case SMART_LIST_COMPLETED:
			m_tasks = Starter.TaskViewModelInstance.GetTasksCompleted(m_query)
		Case SMART_LIST_PLANNED:
			m_tasks = Starter.TaskViewModelInstance.GetTasksPlanned(m_query)
		Case SMART_LIST_TRASH:
			m_tasks = Starter.TaskViewModelInstance.GetDeletedTasks(m_query)
		Case Else, SMART_LIST_NONE:
			m_tasks = Starter.TaskViewModelInstance.GetGroupedTasks(m_query)
	End Select
	

	' Null check the list.
	If m_tasks.IsInitialized Then
		Dim itr As String = ""
		
		' Iterate each item.
		For Each item As ToDo In m_tasks
			
			Dim repeatItem As Repeat = Starter.RepeatViewModelInstance.GetTaskRepeat(item.GetId)
			
			' Initialize a ViewHolder
			Dim viewHolder As TaskViewHolder
			viewHolder.Initialize
			
			' Create subgroups.
			If m_query.IsSortingEnabled() == False Then
				Select m_savedSmartList:
					Case SMART_LIST_PLANNED:
						Dim currentDateIdentification As String = item.GetDueDate.IdentifyDate
					
						If itr <> currentDateIdentification And item.Done == False Then
							itr = currentDateIdentification
						
							Dim subGroup As SubGroupViewHolder
							subGroup.Initialize(xui)
							subGroup.Name.Text = currentDateIdentification
							subGroup.Root.Height = 70
							subGroup.Name.TextSize = 16

							ToDoList.Add(subGroup.BuildView(), subGroup)
						End If
					Case SMART_LIST_SEARCH, SMART_LIST_COMPLETED:
					Case Else:
						' If the Next item Is marked As completed, Then add subGroup "Completed"
						If item.Done == True And itr == "" Then
							Dim subGroup As SubGroupViewHolder
							subGroup.Initialize(xui)
							subGroup.Name.Text = "Completed"
							itr = "Completed"

							subGroup.Name.Height = 68
							ToDoList.Add(subGroup.BuildView(), subGroup)
						End If
				End Select
			End If
			
			' Add items into the list view by binding the viewholder and the data.
			
			ToDoList.Add(CreateItem(viewHolder), viewHolder)
			viewHolder.Root.SetColorAndBorder(Colors.White, 1, Colors.White, 15)
			' Bind the currently referenced vieHolder that ToDoList points to into there
			' currently iterated data.
			BindItem(item, repeatItem, viewHolder)
	
		Next
	End If
	
	' Add the item count information
	Select m_savedSmartList
		' Planned and Completed has a unique way of counting items.
		Case SMART_LIST_PLANNED, SMART_LIST_COMPLETED:
			' @TODO: Add functionality here...
		Case Else:
			Dim subGroup As SubGroupViewHolder
			subGroup.Initialize(xui)
			
			Dim count As Int = m_tasks.Size
			
			subGroup.Name.Text = count & " found task"
			
			' Make the counting information plural if possible.
			If count > 1 Then
				subGroup.Name.Text = subGroup.Name.Text & "(s)"
			End If
			
			subGroup.Name.TextSize = 15
			subGroup.Name.TextColor = Colors.RGB(91,91,91)
			ToDoList.Add(subGroup.BuildView(), subGroup)
	End Select
	
	
End Sub

Private Sub listview_init
	menuListView.Visible = True
	menuListView.AddSingleLine2("	Refresh", 1)
	menuListView.AddSingleLine2("	Sort", 2)
	menuListView.AddSingleLine2("	Settings", 3)
	menuListView.SingleLineLayout.Label.TextSize = 16
	menuListView.SingleLineLayout.Label.TextColor = Colors.Black
	menuListView.SingleLineLayout.ItemHeight = 45dip
		
	Dim cd As ColorDrawable
	cd.Initialize(Colors.White, 3dip)
		
	menuListView.Background = cd
		
		
	menuListViewItemsize.Initialize("")
	menuListViewItemsize.SetLayout(pnlmenuListView.Left, pnlmenuListView.Top, pnlmenuListView.Width, pnlmenuListView.Height)
		
	'pnlmenuListView.SetLayoutAnimated(200,100%x, 0%y, 0, 114dip)
	pnlMenuBgTouch.SendToBack
		
	Dim javaobj As JavaObject = menuListView
	javaobj.RunMethod("setDivider", Array(Null))
	javaobj.RunMethod("setDividerHeight", Array(0))
	
	pnlmenuListView.Elevation = 0
End Sub

Sub menuBtn_Click
	If button_handling Then
		pnlMenuBgTouch.BringToFront
		pnlMenuBgTouch.Elevation = 20
		pnlmenuListView.SetVisibleAnimated(250, True)
		pnlmenuListView.Elevation = 20
		menuListView.BringToFront
		pnlmenuListView.BringToFront
		pnlmenuListView.SetLayoutAnimated(250, menuListViewItemsize.Left, menuListViewItemsize.Top, _
		menuListViewItemsize.Width, menuListViewItemsize.Height)
	End If
End Sub

Private Sub pnlMenuBgTouch_Touch (Action As Int, X As Float, Y As Float)
	
	Select Action
		Case Activity.ACTION_DOWN
			If menuListView.Visible = True Then
				pnlMenuBgTouch.SendToBack
				pnlmenuListView.SetLayoutAnimated(250dip, 1080dip, 0, 0, 228dip)
				pnlmenuListView.SetVisibleAnimated(500, False)
				pnlMenuBgTouch.Elevation = 0
				pnlmenuListView.Elevation = 0
				
			End If
	End Select
End Sub

Private Sub menuListView_ItemClick (Position As Int, Value As Object)
	Select Position
		Case MENU_ITEM_REFRESH:
			
		Case MENU_ITEM_SORT:
			sortMsgBox
		Case MENU_ITEM_SETTINGS:
			StartActivity(SettingsActivity)
	End Select
	
	OnHideMenuListViewItem
End Sub

Private Sub OnHideMenuListViewItem()
	pnlMenuBgTouch.SendToBack
	pnlmenuListView.SetLayoutAnimated(250, 1080, 0, 0, 228)
	pnlmenuListView.SetVisibleAnimated(500, False)
	pnlMenuBgTouch.Elevation = 0
	pnlmenuListView.Elevation = 0
End Sub

Private Sub sortMsgBox
	pnlSortDialoguebg.BringToFront
	pnlSortDialoguebg.Elevation = 20
	pnlSortDialoguebg.SetVisibleAnimated(250, True)
	pnlSortDialogue.BringToFront
	pnlSortDialogue.SetVisibleAnimated(250, True)
	pnlSortDialogue.Elevation = 20
	
	If m_query.IsInitialized == False Then
		m_query.Initialize
	End If
End Sub

' Opens EditorActivity to edit a clicked task.
Private Sub pnlClickArea_Click
	SetIdAsExtra
	
	' Set the EditorActivity mode into edit mode.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_MODE, Starter.EDITOR_MODE_EDIT)
	
	StartActivity(EditorActivity)
End Sub

' Opens the Task Viewer to view a task in detail.
Sub pnlViewArea_Click
	SetIdAsExtra
	
	StartActivity(TaskViewerActivity)
End Sub

' Retrieves the ID and sets the DB-based ID of the clicked task as an extra for use in other
' activities.
Private Sub SetIdAsExtra
	' Obtain the index of the clicked item from the ListView.
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	
	' Obtain the viewHlder that is bound into the view.
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	' Retrieve the task_id bound into the viewHolder and set that ID into the extras.
	Starter.InstanceState.Put(Starter.EXTRA_EDITOR_TASK_ID, viewHolder.ID)
End Sub


Sub pnlViewArea_Touch (Action As Int, X As Float, Y As Float)
	' Obtains the index of the clciked
	Dim index As Int = ToDoList.GetItemFromView(Sender)
	' gets the viewholder
	Dim viewHolder As TaskViewHolder = ToDoList.GetValue(index)
	
	
	Select Action
		Case Activity.ACTION_DOWN ' sets bgcolor of pnl to gray if held
			hasMoved = False
			
			' Set the main click color.
			viewHolder.Root.SetColorAnimated(50, Colors.White, Colors.Gray)
            
		Case Activity.ACTION_MOVE 'sets bgcolor of pnl to white or gray if touch is held and moved
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(100, viewHolder)
				
			End If
            
		Case Activity.ACTION_UP 'starts activity if touch is released
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(100, viewHolder)
				
				' Retrieve the task_id bound into the viewHolder and set that ID into the extras.
				Starter.InstanceState.Put(Starter.EXTRA_EDITOR_TASK_ID, viewHolder.ID)
				
				StartActivity(TaskViewerActivity)
			End If
		
		Case 3
			' only processes if touch has not moved yet 
			If Not(hasMoved) Then
				hasMoved = True
				
				' Process click style.
				OnChkboxViewAreaClick(50, viewHolder)
				
			End If
			
		
       End Select
End Sub


' Used to process the click style of panels above the checkbox of tasks.
Public Sub OnChkboxViewAreaClick(percentage As Int, viewHolder As TaskViewHolder)
	' Touch color differs whether the item is marked as complete or not.
	If viewHolder.TaskCheckbox.Checked Then
		' Execute if task is marked as complete
		viewHolder.Root.SetColorAnimated(percentage, Colors.Gray, TASK_CHECKED_ROOT_COLOR)
	Else
		' Execute if task is not marked as complete
		viewHolder.Root.SetColorAnimated(percentage, Colors.Gray, TASK_UNCHECKED_ROOT_COLOR)
	End If
End Sub

Private Sub drawerButton_Click
	If button_handling Then
		drawer.LeftOpen = True
	End If
End Sub



Sub LoadDrawerItems
	clvItems.sv.ScrollViewInnerPanel.Color = xui.Color_Transparent
	clvItems.sv.Color = xui.Color_Transparent
	
	Dim items As List
	items.Initialize
	
	For Each obj As Group In smartLists		
		obj.Initialize(-1)
	Next
	
	smartLists(0).SetTitle("My Day")
	smartLists(0).SetIcon("")
	
	smartLists(1).SetTitle("Planned")
	smartLists(1).SetIcon("")
	
	smartLists(2).SetTitle("Completed")
	smartLists(2).SetIcon("")
	
	smartLists(3).SetTitle("All")
	smartLists(3).SetIcon("")
	
	smartLists(4).SetTitle("Trash")
	smartLists(4).SetIcon("")

	For Each obj As Group In smartLists
		items.Add(obj)
	Next

	OnLoadTaskGroups(items)
	
	
	Dim sepPanel As B4XView = xui.CreatePanel("")
	sepPanel.SetLayoutAnimated(0, 0, 0, 100%x, 2dip) ' 2dip height for the separator
	Dim innerSep As B4XView = xui.CreatePanel("")
	innerSep.SetLayoutAnimated(0, 5%x, 0, 45.56%x, 2dip) ' 80% width, centered (10% margin on each side)
	innerSep.Color = Colors.LightGray
	sepPanel.AddView(innerSep, 5%x, 0, 45.56%x, 2dip)
	sepPanel.Enabled = False
	innerSep.Enabled = False	
	
	Dim separatorViewHolder As GroupViewHolder
	separatorViewHolder.Initialize
	separatorViewHolder.ID = 0
	separatorViewHolder.IsSeparator = True
	clvItems.Add(sepPanel, separatorViewHolder)
	
	' Load task groups from the database
	items.Clear
	For Each groupObj As Group In Starter.GroupViewModelInstance.GetGroups()
		groupObj.SetIcon("")
		items.Add(groupObj)
	Next
	
	OnLoadTaskGroups(items)

	
End Sub

Private Sub OnLoadTaskGroups(items As List)
	For Each item As Group In items		    
		Dim p As B4XView = xui.CreatePanel("")
		p.SetLayoutAnimated(0, 0, 0, 100%x, 60dip)
		p.LoadLayout("drawerItems")
		
		Dim viewHolder As GroupViewHolder
		viewHolder.Initialize
		
		viewHolder.Root = p
		viewHolder.ID = item.GetID
		viewHolder.Name = lblGroupName
		viewHolder.Icon = lblGroupIcon
		viewHolder.BackPanel = groupPanel
		
		viewHolder.Name.Text = item.GetTitle
		viewHolder.Icon.Text = item.GetIcon

		viewHolder.Root.SetColorAndBorder(Colors.White, 0, Colors.Transparent, 0)
		viewHolder.BackPanel.SetColorAndBorder(Colors.White, 0, Colors.Transparent, 0)
		viewHolder.Icon.SetColorAndBorder(Colors.White, 0, Colors.Transparent, 0)
		viewHolder.Name.SetColorAndBorder(Colors.White, 0, Colors.Transparent, 0)
		clvItems.Add(p, viewHolder)
	Next
End Sub

' Function for task group click.
Private Sub clvItems_ItemClick (Index As Int, Value As Object)
	Dim viewHolder As GroupViewHolder = Value
	
	If viewHolder.IsSeparator == True Then
		' Reset selection to previous item
		clvItems.GetPanel(Index).Color = xui.Color_Transparent
		Return
	End If
	
	' 0 ID for groups cannot exist on the database. Therefore, it is reserved
	' for special groups such as smart lists.
	If viewHolder.ID <= 0 Then
		m_savedSmartList = Index
		
		OnLoadPage(smartLists(Index))
	Else
		m_savedSmartList = SMART_LIST_NONE
		
		' Get the associated group based on the ID stored in the clicked view holder of the nav drawer.
		Dim groupObj As Group = Starter.GroupViewModelInstance.GetGroup(viewHolder.ID)
		
		OnLoadPage(groupObj)
	End If
End Sub

Private Sub OnLoadPage(item As Group)
	m_savedGroup = item
	
	titleLabel.Text = item.GetTitle
	drawer.LeftOpen = False
	mainFragment.RemoveAllViews
	mainFragment.LoadLayout("newFragment")
	LoadItems
	drawer.LeftOpen = False
End Sub

Private Sub searchBtn_Click
	If button_handling Then
		svSearchBody.Panel.LoadLayout("searchFragmentSVLayout")
		pnlTitleBar.Elevation = 0
		pnlSearch.SetLayout(pnlTitleBar.Left, pnlTitleBar.Top, pnlTitleBar.Width, pnlTitleBar.Height)
		pnlSearch.SetVisibleAnimated(150, True)
		pnlSearch.Elevation = 10
		pnlSearch.BringToFront

		
		searchFragment.SetLayout(mainFragment.Left, mainFragment.Top, mainFragment.Width, mainFragment.Height)
		searchFragment.SetVisibleAnimated(150, True)
		searchFragment.BringToFront
		
		Sleep(150)
		mainFragment.Visible = False
		pnlTitleBar.Visible = False
		
	End If
End Sub

Private Sub backBtn_Click
	If button_handling Then
		Dim fadeout As Animation
		fadeout.InitializeAlpha("fade", 1, 0)
		fadeout.Duration = 150
		
		mainFragment.Visible = True
		pnlTitleBar.Visible = True
		
		fadeout.Start(pnlSearch)
		fadeout.Start(searchFragment)
		
		pnlSearch.Visible = False
		pnlSearch.Elevation = 0
		searchFragment.Visible = False
		searchFragment.Elevation = 0
		pnlTitleBar.Elevation = 10
		
		pnlSearch.SendToBack
		searchFragment.SendToBack
		svSearchBody.Panel.RemoveAllViews
	End If
End Sub

Public Sub button_handling As Boolean
	Dim now As Long = DateTime.Now
	If now - lastClickTime < 250 Then
		' Less than 300ms since last click, ignore
		Return False
	End If
	lastClickTime = now ' Update the time of the last click
	Return True
End Sub

Private Sub enterBtn_Click
	ToastMessageShow("startactivity", False)
	'StartActivity(searchactivity)
End Sub


Private Sub btnCancel_Click
	sortMsgBox_disappear
End Sub

Private Sub btnConfirm_Click
	sortMsgBox_disappear
	
	ToDoList.Clear
	LoadItems
End Sub

Private Sub sortMsgBox_disappear
	pnlSortDialoguebg.SetVisibleAnimated(200, False)
	pnlSortDialoguebg.Elevation = 0
	pnlSortDialoguebg.SendToBack
	
	pnlSortDialogue.SetVisibleAnimated(200, False)
	pnlSortDialogue.Elevation = 0
	pnlSortDialogue.SendToBack
End Sub

Private Sub radioSortByTitle_CheckedChange(Checked As Boolean)
	m_query.SetSortField(m_query.FIELD_TITLE)
End Sub

Private Sub radioSortByPrio_CheckedChange(Checked As Boolean)
	m_query.SetSortField(m_query.FIELD_PRIORITY)
End Sub

Private Sub radioSortByDD_CheckedChange(Checked As Boolean)
	m_query.SetSortField(m_query.FIELD_DUE_DATE)
End Sub

Private Sub radioSortByCreaion_CheckedChange(Checked As Boolean)
	m_query.SetSortField(m_query.FIELD_CREATED_AT)
End Sub

Private Sub radioDesc_CheckedChange(Checked As Boolean)
	m_query.SetSortOrder(m_query.ORDER_DESC)
End Sub

Private Sub radioAsc_CheckedChange(Checked As Boolean)
	m_query.SetSortOrder(m_query.ORDER_ASC)
End Sub

Private Sub checkFBPriority_CheckedChange(Checked As Boolean)
	SetRadioButtonsEnabled(pnlFBPriority, Checked)
End Sub

Sub SetRadioButtonsEnabled(pnl As Panel, enabled As Boolean)
		For i = 0 To pnl.NumberOfViews - 1
			Dim v As View = pnl.GetView(i)
			v.Enabled = enabled
		Next
End Sub



Private Sub checkFBRepeat_CheckedChange(Checked As Boolean)
	SetRadioButtonsEnabled(pnlFBRepeat, Checked)
End Sub

Private Sub checkFBDueDate_CheckedChange(Checked As Boolean)
	SetRadioButtonsEnabled(pnlFBDueDate, Checked)
End Sub



Private Sub checkFBGroup_CheckedChange(Checked As Boolean)
	SetRadioButtonsEnabled(pnlFBGroupName, Checked)
End Sub

Private Sub radioDueSpecificDateRange_CheckedChange(Checked As Boolean)
	SetRadioButtonsEnabled(pnlDueSpecificDateRange, Checked)
	
	For i = 0 To pnlDueSpecificDate.NumberOfViews - 1
		Dim v As View = pnlDueSpecificDate.GetView(i)
		Dim c As View = pnlDueSpecificDateGroup.GetView(0)
		c.Enabled = False
		v.Enabled = False
	Next
End Sub

Private Sub radioDueSpecificDateGroup_CheckedChange(Checked As Boolean)
	SetRadioButtonsEnabled(pnlDueSpecificDateGroup, Checked)
	
	For i = 0 To pnlDueSpecificDateRange.NumberOfViews - 1
		Dim v As View = pnlDueSpecificDateRange.GetView(i)
		Dim c As View = pnlDueSpecificDate.GetView(i)
		c.Enabled = False
		v.Enabled = False
	Next
End Sub

Private Sub radioDueSpecificDate_CheckedChange(Checked As Boolean)
	SetRadioButtonsEnabled(pnlDueSpecificDate, Checked)
	
	For i = 0 To pnlDueSpecificDateRange.NumberOfViews - 1
		Dim v As View = pnlDueSpecificDateRange.GetView(i)
		Dim c As View = pnlDueSpecificDateGroup.GetView(0)
		c.Enabled = False
		v.Enabled = False
	Next
End Sub

Private Sub groupPanel_Click
	StartActivity(TaskGroupActivity)
End Sub